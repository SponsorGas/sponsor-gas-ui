datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
  provider = "prisma-client-js"
}

model Chain {
  id           Int           @id @default(autoincrement())
  chainId      String        @unique
  name         String
  rpcUrl       String
  paymasters   Paymaster[]
  applications Application[]
}

model Paymaster {
  id                       String              @id @default(cuid())
  name                     String
  description              String
  image                    String
  type                     String
  published                Boolean             @default(false)
  applications             Application[]
  createdAt                DateTime            @default(now())
  PaymasterCriteria        PaymasterCriteria[]
  owner                    User?               @relation(fields: [ownerId], references: [id])
  ownerId                  String?
  chain                    Chain               @relation(fields: [chainId], references: [chainId])
  chainId                  String
  paymasterAddress         String              @default("NotSet")
  paymasterOffchainService String              @default("http://localhost:8001/api/paymasters/{paymasterAddress}")
}

model PaymasterCriteria {
  id               String    @id @default(cuid())
  isMandatory      Boolean
  type             String // Store the type of challenge criteria ("video_challenge", "question_challenge", etc.)
  video            String? // Path to video for video challenge
  questionBook     Json? // JSON object for question challenge
  nftCollection    String? // NFT collection address for NFT challenge
  identityProvider String? // Identity provider for identity challenge
  paymaster        Paymaster @relation(fields: [paymasterId], references: [id])
  paymasterId      String
  createdAt        DateTime  @default(now())
}

model Application {
  id           String      @id @default(cuid())
  value        String // Application address
  name         String
  paymasters   Paymaster[] // Relationship to Paymaster
  registerer   User?       @relation(fields: [registererId], references: [id])
  registererId String?
  chain        Chain       @relation(fields: [chainId], references: [chainId])
  chainId      String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  paymasters    Paymaster[]
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
